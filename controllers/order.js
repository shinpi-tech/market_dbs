import ApiError from '../service/error/ApiError.js'
import axios from 'axios'
import TelegramBot from 'node-telegram-bot-api'
import dotenv from 'dotenv'
dotenv.config()

const token = process.env.TOKEN
const bot = new TelegramBot(token, { polling: true })

class OrderController {
	async post (req, res, next) {
		try {
			if (process.env.AUTH_TOKEN !== req.headers.authorization) return next(ApiError.forbidden('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π.'))
			const order_number = String(req.body.order.id)
			const items = req.body.order.items
			const order = {
				accepted: true,
				id: order_number
			}
			if (req.body.order.fake) {
				return res.json({ order })
			}
			await items.forEach(el => {
				axios.post('https://api.shinpi.ru/kolobox/orders/', null, {
					params: { id: el.shopSku, quantity: el.count },
					headers: { token: process.env.TOKEN_API }
				}).then(result => {
					axios.get('https://api.shinpi.ru/catalog/products/' + el.shopSku)
						.then(async product => {
							await bot.sendMessage(5413966898, `‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ <code>${order_number}</code> –Ω–∞ —Å—É–º–º—É <code>${product.data.price.rp * el.count}</code> ‚ÇΩ. –û—Ç–≥—Ä—É–∑–∫–∞: ${req.body.order.delivery.shipments[0].shipmentDate}\r\n\r\n ‚Ä¢ <code>${product.data.name}</code> - ${el.count} —à—Ç.\r\n\r\n- –ê—Ä—Ç–∏–∫—É–ª: <code>${product.data.article}</code>\r\n- ID: <code>${el.offerId}</code>\r\n- –ó–∞–∫–∞–∑: <code>${result.data.orders[0]}</code>\r\n- –û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <code>${product.data.price.wp * el.count}</code> ‚ÇΩ`, {parse_mode: 'HTML'}).catch(error => console.log(error))
						})
				}).catch(async error => {
					await bot.sendMessage(5413966898, `üÜò –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ <code>${order_number}</code> –Ω–∞ —Å—É–º–º—É ${req.body.order.itemsTotal} ‚ÇΩ. –û—Ç–≥—Ä—É–∑–∫–∞: ${req.body.order.delivery.shipments[0].shipmentDate}\r\n\r\n ‚Ä¢ ${el.offerName} - ${el.count} —à—Ç.\r\n<code>${el.offerId}</code>\r\n\r\n–ó–∞–∫–∞–∑ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω!`, { parse_mode: 'HTML' }).catch(error => console.log(error))
				})
			})
			return res.json({ order })
		} catch (e) {
			next(ApiError.badRequest(e))
		}
	}

	async status (req, res, next) {
		try {
			return res.json('ok')
		} catch (e) {
			next(ApiError.badRequest(e))
		}
	}
}

export default new OrderController()
